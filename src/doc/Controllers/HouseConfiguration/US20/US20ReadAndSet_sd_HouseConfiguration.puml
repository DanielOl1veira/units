@startuml

title Read and Set

skinparam titleBorderRoundCorner 10
skinparam titleBorderThickness 3
skinparam titleBorderColor indianred
skinparam titleBackgroundColor ivory
skinparam FontName quicksand

skinparam actor {
  BorderColor indianred
  }

skinparam sequence {
  LifeLineBackgroundColor indianred
  ParticipantBackgroundColor ivory
}

skinparam roundcorner 10

skinparam component {
  arrowThickness 1
  ArrowFontName Verdana
  ArrowColor indianred
  ArrowFontColor darkslategrey
}




-> CSVReaderController: readAndSet(GeographicAreaList geographicAreaList, String path)
activate CSVReaderController

CSVReaderController -->> CSVReaderController: SensorList fullSensorList = getSensorData(geographicAreaList)
CSVReaderController -->> CSVReader: List<String[]> list = csvRead.readCSV(path);
alt try

CSVReaderController -->> FileReader: fileReader = new FileReader
CSVReaderController -->> BufferedReader: buffReader = new BufferedReader
CSVReaderController -->> Logger: Logger logger = Logger.getLogger(CSVReader.class.getName())
CSVReaderController -->> CustomFormatter: CustomFormatter myFormat = new CustomFormatter();
CSVReaderController -->> FileHandler: FileHandler fileHandler = new FileHandler( Log Output Path)
CSVReaderController -> CSVReaderController: logger.addHandler(fileHandler);
CSVReaderController -> CSVReaderController: fileHandler.setFormatter(myFormat);
loop  String[] readings CONTAINED IN list
CSVReaderController -> CSVReaderController: parseAndLog(readings, logger, fullSensorList);
end
else catch
CSVReaderController -> CSVReaderController: IOException

end

@enduml