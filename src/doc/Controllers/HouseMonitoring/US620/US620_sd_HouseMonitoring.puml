@startuml

skinparam titleBorderRoundCorner 10
skinparam titleBorderThickness 3
skinparam titleBorderColor indianred
skinparam titleBackgroundColor ivory
skinparam FontName quicksand

skinparam actor {
 	BorderColor indianred
 	}

 skinparam sequence {
 	LifeLineBackgroundColor indianred
 	ParticipantBackgroundColor ivory
 }

 skinparam roundcorner 10

 skinparam component {
   arrowThickness 1
   ArrowFontName Verdana
   ArrowColor indianred
   ArrowFontColor darkslategrey
 }
title US0620


actor User
User -> MainUI: Get Average Rainfall on House Area on a single day
activate MainUI
MainUI ->HouseMonitoringUI: Get Average Rainfall on House Area on a single day
activate HouseMonitoringUI
HouseMonitoringUI --> User: Request Date
User -> HouseMonitoringUI: insert Date (Date(y-m-d))
MainUI -> HouseMonitoringUI: create data (Date(y-m-d))
HouseMonitoringUI -> HouseMonitoringUI: set data (year, month, day)
HouseMonitoringUI -> HouseMonitoringController: createDate (year, month, day)
activate HouseMonitoringController
HouseMonitoringController --> HouseMonitoringUI: return Date
HouseMonitoringUI -> HouseMonitoringController: getAVGDailyRainfallOnGivenDay(mHouse, givenDate)
HouseMonitoringController -> GeographicArea: getAvgReadingsFromSensorTypeInGA ("rain", Date)
activate GeographicArea
GeographicArea -> ReadingList: getAverageReadingsOnSingleDay ("Rain", Date)
activate ReadingList
ReadingList --> GeographicArea: return AVGValuesFromDaysWithReadings
deactivate ReadingList
GeographicArea --> HouseMonitoringController: return AVGReadingsFromSensorType
deactivate GeographicArea
HouseMonitoringController -->  HouseMonitoringUI: return AVGReadingsFromSensorType
deactivate HouseMonitoringController
HouseMonitoringUI -> HouseMonitoringUI: Build result string
HouseMonitoringUI -->User: Display result string
deactivate MainUI
@enduml