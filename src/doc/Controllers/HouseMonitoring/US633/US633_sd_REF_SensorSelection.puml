@startuml
skinparam titleBorderRoundCorner 10
skinparam titleBorderThickness 3
skinparam titleBorderColor indianred
skinparam titleBackgroundColor ivory
skinparam FontName quicksand

skinparam actor {
  BorderColor indianred
  }

skinparam sequence {
  LifeLineBackgroundColor indianred
  ParticipantBackgroundColor ivory
}

skinparam roundcorner 10

skinparam component {
  arrowThickness 1
  ArrowFontName Verdana
  ArrowColor indianred
  ArrowFontColor darkslategrey
}

title REF Closest Sensor Selection \n - Success Case -
autonumber

activate ":HouseMonitoringController"
":HouseMonitoringController"->":House":getClosestSensorOfGivenType(String)
activate ":House"
":House" -> ":GeographicArea": getSensorsOfGivenType(String)
 activate ":GeographicArea"

":GeographicArea" -> ":SensorList": getSensorsOfGivenType(String)

activate ":SensorList"
":SensorList" -> ":Sensor": getSensorTypeByName()
activate ":Sensor"
":Sensor" --> ":SensorList": return string sensor type
deactivate ":Sensor"
":SensorList" --> ":GeographicArea": return SensorList
deactivate ":SensorList"
":GeographicArea" --> ":House": return SensorList
deactivate ":GeographicArea"

":House" -> ":House": getMinDistanceToSensorOfGivenType(SensorList)
":House" --> ":House": return double
":House" -> ":SensorList": getSensorByDistanceToHouse(House, double)
activate ":SensorList"
":SensorList" -> ":Sensor": getDistanceToHouse(House)
activate ":Sensor"
":Sensor" -> ":Local": getLinearDistanceBetweenLocals(Local)
activate ":Local"
":Local" --> ":Sensor": return double
deactivate ":Local"
":Sensor" --> ":SensorList": return double
deactivate ":Sensor"
":SensorList" --> ":House": return SensorList
deactivate ":SensorList"
":House"-->":HouseMonitoringController": return sensor
deactivate ":House"
deactivate ":HouseMonitoringController"

@enduml